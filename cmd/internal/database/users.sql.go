// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (id, created_at, updated_at, body, user_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, body, user_id
`

type CreateChirpParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1
)
RETURNING id, created_at, updated_at, email
`

func (q *Queries) CreateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const getAllChirps = `-- name: GetAllChirps :many
SELECT c.id, c.created_at, c.updated_at, c.body, u.id AS user_id
FROM chirps c
JOIN users u ON c.user_id = u.id
ORDER BY c.created_at ASC
LIMIT $1 OFFSET $2
`

type GetAllChirpsParams struct {
	Limit  int32
	Offset int32
}

type GetAllChirpsRow struct {
	ID        uuid.UUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Body      string
	UserID    uuid.UUID
}

func (q *Queries) GetAllChirps(ctx context.Context, arg GetAllChirpsParams) ([]GetAllChirpsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirps, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllChirpsRow
	for rows.Next() {
		var i GetAllChirpsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpByID = `-- name: GetChirpByID :one
SELECT c.id, c.created_at, c.updated_at, c.body, u.id AS user_id
FROM chirps c
JOIN users u ON c.user_id = u.id
WHERE c.id = $1
`

type GetChirpByIDRow struct {
	ID        uuid.UUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Body      string
	UserID    uuid.UUID
}

func (q *Queries) GetChirpByID(ctx context.Context, id uuid.UUID) (GetChirpByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getChirpByID, id)
	var i GetChirpByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const reset = `-- name: Reset :exec
TRUNCATE TABLE chirps, users RESTART IDENTITY CASCADE
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}
